/*
 * This is a program by K.G.Sampath Sandaruwan.
 * Smcmails@gmail.com
 * 0774471293
 * Sandaruwankgs.wordpress.com
 */
package Admin;

import Includes.Database;
import java.awt.Dimension;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.*;

/**
 *
 * @author K.G.S.Sandaaruwan
 */
public class ViewRoutsForEdit extends javax.swing.JFrame {

    private String adminUsername;
    private String[][] routData;

    public ViewRoutsForEdit(String username) {
        adminUsername = username;
        initWindow();
        setResultTable(null);
    }

    /**
     * Creates new form View
     */
    public ViewRoutsForEdit(String username, String routNumber) {
        adminUsername = username;
        initWindow();
        setResultTable(routNumber);
    }

    private void initWindow() {
        this.setUndecorated(true);
        initComponents();
        this.setSize(890, 570);
        this.setAlwaysOnTop(false);
        this.setResizable(false);
        this.setVisible(true);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        routTable = new javax.swing.JTable();
        back = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        editHalts = new javax.swing.JButton();
        viewAll = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        routTable.setBackground(new java.awt.Color(204, 255, 255));
        routTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seat", "From", "To", "By"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        routTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        routTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                routTableMouseClicked(evt);
            }
        });
        routTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                routTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(routTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 70, 824, 28);

        back.setBackground(new java.awt.Color(0, 51, 153));
        back.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        back.setForeground(new java.awt.Color(0, 255, 255));
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(50, 500, 100, 30);

        edit.setBackground(new java.awt.Color(0, 51, 153));
        edit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        edit.setForeground(new java.awt.Color(0, 255, 255));
        edit.setText("Edit Data");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        getContentPane().add(edit);
        edit.setBounds(720, 500, 140, 30);

        delete.setBackground(new java.awt.Color(255, 153, 204));
        delete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        delete.setText("Delete Route");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete);
        delete.setBounds(390, 500, 120, 30);

        editHalts.setBackground(new java.awt.Color(0, 51, 153));
        editHalts.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        editHalts.setForeground(new java.awt.Color(0, 255, 255));
        editHalts.setText("Edit Halts");
        editHalts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editHaltsActionPerformed(evt);
            }
        });
        getContentPane().add(editHalts);
        editHalts.setBounds(560, 500, 120, 30);

        viewAll.setBackground(new java.awt.Color(0, 51, 153));
        viewAll.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        viewAll.setForeground(new java.awt.Color(0, 255, 255));
        viewAll.setText("View All");
        viewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllActionPerformed(evt);
            }
        });
        getContentPane().add(viewAll);
        viewAll.setBounds(200, 500, 140, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/125.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 890, 570);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void routTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_routTableKeyPressed
    }//GEN-LAST:event_routTableKeyPressed
    private void routTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_routTableMouseClicked
        routTable.editCellAt(routTable.getSelectedRow(), routTable.getSelectedColumn());
        routTable.setSurrendersFocusOnKeystroke(true);
        routTable.getEditorComponent().requestFocus();
    }//GEN-LAST:event_routTableMouseClicked

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        Services x = new Services(adminUsername);
        x.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backActionPerformed

    @SuppressWarnings("empty-statement")
    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        boolean isTotalDistanceChanged;
        routTable.editCellAt(0, 0);
        String unmatches = "";
        DefaultTableModel dtm = (DefaultTableModel) routTable.getModel();

        for (int i = 0; i < routTable.getRowCount(); i++) {
            for (int j = 0; j < routTable.getColumnCount(); j++) {
                String checkingEntity = dtm.getValueAt(i, j).toString();
                if (!checkingEntity.equals(routData[i][j])) {
                    unmatches += routData[i][0] + "-" + (j + 1) + "-" + checkingEntity + " / ";
                }
            }
        }
        String[] changes = unmatches.split(" / ");

        if (changes.length > 0) {
            for (String change : changes) {
                isTotalDistanceChanged = false;
                try {
                    String[] components = change.split("-");
                    if (components.length > 1) {
                        String attribute = null;
                        switch (components[1]) {
                            case "1":
                                JOptionPane.showMessageDialog(this, "You cant edit rout number of a rout");
                                attribute = null;
                                break;
                            case "2":
                                attribute = "`rout`=";
                                break;
                            case "3":
                                attribute = "`total_distance`=";
                                JOptionPane.showMessageDialog(this, "You have chaned the total distance "
                                        + "of a rout. Now you have to change halts configuration also");
                                isTotalDistanceChanged = true;
                                break;
                            case "4":
                                attribute = "`total_bus_fee`=";
                                break;
                            case "5":
                                attribute = "`total_travel_time_in_minutes`=";
                                break;
                        }

                        if (attribute != null) {
                            Connection con = Database.getConnected();
                            String query;
                            ResultSet rs;

                            query = "UPDATE `rout_data` SET " + attribute + components[2]
                                    + " WHERE `rout_number` = '" + components[0] + "'";
                            int res = Database.updateQuery(con, query);
                            if (res == 1) {
                                JOptionPane.showMessageDialog(this,
                                        attribute + components[2] + " on route number "
                                        + components[0] + " was updated succesfully",
                                        "Success", 1);
                            }
                            Database.disconnect(con);
                        }
                        if (isTotalDistanceChanged) {
                            EditHalts x = new EditHalts(adminUsername,
                                    components[0], Integer.parseInt(components[2]));
                            x.setVisible(true);
                            this.dispose();
                        }
                    }
                } catch (SQLException | ClassNotFoundException ex) {
                    ex.printStackTrace();
                }
            }
        }
        setResultTable(null);
    }//GEN-LAST:event_editActionPerformed

    private void editHaltsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editHaltsActionPerformed
        try {
            DefaultTableModel dtm = (DefaultTableModel) routTable.getModel();
            String routNumber = dtm.getValueAt(routTable.getSelectedRow(), 0).toString();
            int distance = Integer.parseInt(dtm.getValueAt(routTable.getSelectedRow(), 2).toString());
            EditHalts x = new EditHalts(adminUsername, routNumber, distance);
            x.setVisible(true);
            this.dispose();
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Click on a route shown in table to edit halts in it");

        }

    }//GEN-LAST:event_editHaltsActionPerformed

    private void viewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllActionPerformed
        setResultTable(null);
    }//GEN-LAST:event_viewAllActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        String input;
        try {
            do {
                input = JOptionPane.showInputDialog(this, "Do you want to delete selected "
                        + "bus rout (Y/N) ?");
            } while (!(input.equalsIgnoreCase("y") || input.equalsIgnoreCase("n")));
        } catch (NullPointerException ex) {
            input = "N";
        }
        if (input.equalsIgnoreCase("y")) {
            DefaultTableModel dtm = (DefaultTableModel) routTable.getModel();
            String routNumber = dtm.getValueAt(routTable.getSelectedRow(), 0).toString();

            try {
                deleteRout(routNumber);
                ViewRoutsForEdit x = new ViewRoutsForEdit(adminUsername);
                x.setVisible(true);
                this.dispose();
            } catch (SQLException | ClassNotFoundException ex) {
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    public void deleteRout(String routNumber) throws SQLException, ClassNotFoundException {
        Connection con = Database.getConnected();
        String query = "DELETE FROM rout_data WHERE rout_number='" + routNumber + "'";
        Database.updateQuery(con, query);
        query = "DROP TABLE " + routNumber;
        Database.updateQuery(con, query);
        Database.disconnect(con);
    }

    private void setResultTable(String routNumber) {
        String[] header = {"Rout Number", "Rout Between", "Total Distance",
            "Maximum Bus Fee", "Rumming duratiion (minutes)"};
        DefaultTableModel dtm = new DefaultTableModel() {
            public boolean isCelEditable(int row, int coll) {
                return coll != 1;
            }
        };
        dtm.setColumnIdentifiers(header);
        routTable.setModel(dtm);

        try {
            routData = viewBusRouts(routNumber);

            for (String[] result : routData) {
                dtm.addRow(result);
                routTable.setModel(dtm);
            }
        } catch (SQLException | ClassNotFoundException ex) {
        }

        Dimension dim = jScrollPane1.getSize();
        int height = (routTable.getRowCount() * 16) + 26;
        if (height > 420) {
            height = 420;
        }
        jScrollPane1.setSize(dim.width, height);
    }

    private String[][] viewBusRouts(String routNumber)
            throws SQLException, ClassNotFoundException {

        Connection con;
        ResultSet rs = null;
        String query;
        String[][] results = null;

        con = Database.getConnected();
        if (routNumber != null) {
            query = "SELECT * FROM rout_data WHERE rout_number='" + routNumber + "'";
        } else {
            query = "SELECT * FROM rout_data";
        }
        rs = Database.executeQuery(con, query);
        if (!rs.next()) {
            query = "SELECT * FROM rout_data";
        }
        rs = Database.executeQuery(con, query);
        int count;
        for (count = 0; rs.next(); count++) {
        }
        rs = Database.executeQuery(con, query);
        results = new String[count][5];
        for (int i = 0; rs.next(); i++) {
            results[i][0] = rs.getString(1);
            results[i][1] = rs.getString(2);
            results[i][2] = rs.getString(3);
            results[i][3] = rs.getString(4);
            results[i][4] = rs.getString(5);
        }
        Database.disconnect(con);
        return results;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JButton editHalts;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable routTable;
    private javax.swing.JButton viewAll;
    // End of variables declaration//GEN-END:variables
}
