/*
 * This is a program by K.G.Sampath Sandaruwan.
 * Smcmails@gmail.com
 * 0774471293
 * Sandaruwankgs.wordpress.com
 */
package Admin;

import Includes.Database;
import java.awt.Dimension;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author K.G.S.Sandaaruwan
 */
public class HaltDistanceInput extends javax.swing.JFrame {

    private String adminUsername;
    private String routNumber, from, to;
    private int distance, fee, duration, halts;
    private Connection con;

    /**
     * Creates new form HaltDistanceInput
     */
    public HaltDistanceInput(String username, String[] argsString, int[] argsInt) {
        adminUsername = username;
        routNumber = argsString[0];
        from = argsString[1];
        to = argsString[2];
        distance = argsInt[0];
        fee = argsInt[1];
        duration = argsInt[2];
        halts = argsInt[3];
        initWindow();
    }

    private void initWindow() {
        this.setUndecorated(true);
        initComponents();
        this.setSize(890, 570);
        this.setAlwaysOnTop(false);
        this.setResizable(false);
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        initFields();
    }

    private void initFields() {
        distanceTable.setVisible(false);
        jScrollPane2.setVisible(false);
        String[] header = {"Halts"};
        DefaultTableModel dtm = new DefaultTableModel() {
            public boolean isCelEditable(int row, int coll) {
                return coll != 1;
            }
        };
        dtm.setColumnIdentifiers(header);
        haltsTable.setModel(dtm);

        for (int i = 0; i < halts; i++) {
            String[] halt = {""};
            dtm.addRow(halt);
            haltsTable.setModel(dtm);
        }

        Dimension dim = haltsTable.getSize();
        int height = (haltsTable.getRowCount() * 16) + 26;
        if (height > 420) {
            height = 420;
        }
        jScrollPane1.setSize(dim.width, height);
        haltsTable.requestFocusInWindow();
        haltsTable.editCellAt(0, 0);
        haltsTable.setSurrendersFocusOnKeystroke(true);
        haltsTable.getEditorComponent().requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        haltsTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        distanceTable = new javax.swing.JTable();
        enterDistance = new javax.swing.JButton();
        reEnter = new javax.swing.JButton();
        ok = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        help = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        back.setBackground(new java.awt.Color(0, 51, 153));
        back.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        back.setForeground(new java.awt.Color(0, 255, 255));
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(60, 490, 120, 30);

        haltsTable.setBackground(new java.awt.Color(204, 255, 255));
        haltsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Halts"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        haltsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                haltsTableMouseClicked(evt);
            }
        });
        haltsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                haltsTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(haltsTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(90, 70, 207, 30);

        distanceTable.setBackground(new java.awt.Color(204, 255, 255));
        distanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Distance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        distanceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                distanceTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(distanceTable);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(430, 70, 400, 30);

        enterDistance.setBackground(new java.awt.Color(0, 51, 153));
        enterDistance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        enterDistance.setForeground(new java.awt.Color(0, 255, 255));
        enterDistance.setText("Distances");
        enterDistance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterDistanceActionPerformed(evt);
            }
        });
        getContentPane().add(enterDistance);
        enterDistance.setBounds(301, 189, 120, 30);

        reEnter.setBackground(new java.awt.Color(255, 153, 204));
        reEnter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        reEnter.setText("Re-enter halts");
        reEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reEnterActionPerformed(evt);
            }
        });
        getContentPane().add(reEnter);
        reEnter.setBounds(210, 490, 150, 30);

        ok.setBackground(new java.awt.Color(0, 51, 153));
        ok.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ok.setForeground(new java.awt.Color(0, 255, 255));
        ok.setText("OK");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });
        getContentPane().add(ok);
        ok.setBounds(710, 490, 120, 30);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Enter your halts list here first");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(90, 50, 210, 14);

        help.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/help-icon.png"))); // NOI18N
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });
        getContentPane().add(help);
        help.setBounds(740, 10, 60, 60);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/125.jpg"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 890, 570);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        String[] args = {routNumber, from, to, Integer.toString(distance),
            Integer.toString(fee), Integer.toString(duration), Integer.toString(halts)};
        AddNewBusRout x = new AddNewBusRout(adminUsername, args);
        this.dispose();
    }//GEN-LAST:event_backActionPerformed

    private void enterDistanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterDistanceActionPerformed
        boolean filled = true;
        DefaultTableModel dtm = (DefaultTableModel) haltsTable.getModel();
        haltsTable.editCellAt(0, 0);
        for (int i = 0; i < halts; i++) {
            if ("".equals(dtm.getValueAt(i, 0).toString())) {
                JOptionPane.showMessageDialog(this, "Dont leave cells in halts table empty");
                filled = false;
                break;
            }
        }
        if (filled) {
            haltsTable.setEnabled(false);
            enterDistance.setVisible(false);
            distanceTable.setVisible(true);
            jScrollPane2.setVisible(true);
            setDistanceTable();
        }
    }//GEN-LAST:event_enterDistanceActionPerformed

    private void setDistanceTable() {
        haltsTable.editCellAt(0, 0);
        String[] header = {"Description", "Distance"};
        DefaultTableModel dtm = new DefaultTableModel() {
            public boolean isCelEditable(int row, int coll) {
                return coll != 1;
            }
        };
        dtm.setColumnIdentifiers(header);
        distanceTable.setModel(dtm);

        DefaultTableModel dtm2 = (DefaultTableModel) haltsTable.getModel();

        for (int i = 0; i < haltsTable.getRowCount() - 1; i++) {
            String halt1 = null;
            String halt2 = null;
            try {
                halt1 = dtm2.getValueAt(i, 0).toString();
                halt2 = dtm2.getValueAt(i + 1, 0).toString();
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Dont leave cells in halts table empty");
            }
            if (halt1 != null && halt2 != null) {
                String description = halt1 + " to " + halt2;
                String[] halt = {description};
                dtm.addRow(halt);
                distanceTable.setModel(dtm);
            }
        }

        Dimension dim = distanceTable.getSize();
        int height = (distanceTable.getRowCount() * 16) + 26;
        if (height > 420) {
            height = 420;
        }
        jScrollPane2.setSize(dim.width, height);
    }

    private void reEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reEnterActionPerformed
        enterDistance.setVisible(true);
        haltsTable.setEnabled(true);
        int n = JOptionPane.showConfirmDialog(this, "Your all entered data will "
                + "be erased.\nContinue \"Re-enter Halts\"?", "Contimue ?",
                JOptionPane.YES_NO_OPTION);
        if (n == 0) {
            String input = JOptionPane.showInputDialog(this,
                    "Enter the number of halts in this bus rout");
            try {
                halts = Integer.parseInt(input);
                initFields();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Number of halts must be a positive integer");
            }
        }
    }//GEN-LAST:event_reEnterActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        distanceTable.editCellAt(0, 0);
        DefaultTableModel dtm = (DefaultTableModel) distanceTable.getModel();
        DefaultTableModel dtm2 = (DefaultTableModel) haltsTable.getModel();
        int enteredDistance = 0;
        try {
            for (int i = 0; i < distanceTable.getRowCount(); i++) {
                enteredDistance += Integer.parseInt(dtm.getValueAt(i, 1).toString());
            }
            if (enteredDistance != (double) distance) {

                int userInput = JOptionPane.showConfirmDialog(this,
                        ("Entered distance values "
                        + "are not equal with the total distance,\n which entered "
                        + "in prevoius step\n\n")
                        + ("Your entered distance here = " + enteredDistance
                        + "\nYour total distance in above step = " + distance + "\n\n"
                        + "Do you want to edit total route distance?\n\n"
                        + "Note: If you press ok, all data you entered about "
                        + "halts will be lossed"),
                        "Distances not matched",
                        JOptionPane.YES_NO_OPTION);

                if (userInput == 0) {
                    backActionPerformed(evt);
                }
            } else {
                String haltList = "";
                String distanceList = "0, ";
                for (int i = 0; i < haltsTable.getRowCount(); i++) {
                    haltList += dtm2.getValueAt(i, 0).toString() + ", ";
                }
                for (int i = 0; i < distanceTable.getRowCount(); i++) {
                    distanceList += dtm.getValueAt(i, 1).toString() + ", ";
                }
                try {
                    addNewRout(routNumber, from + "-" + to, distance, fee, duration, haltList, distanceList);
                    ViewRoutsForEdit x = new ViewRoutsForEdit(adminUsername);
                    x.setVisible(true);
                    this.dispose();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Distance should be a positive integer value.\n"
                    + "Please ignore decimals and enter as integer.");
        }

    }//GEN-LAST:event_okActionPerformed

    private void haltsTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_haltsTableKeyPressed

    }//GEN-LAST:event_haltsTableKeyPressed

    private void haltsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_haltsTableMouseClicked
        haltsTable.editCellAt(haltsTable.getSelectedRow(), haltsTable.getSelectedColumn());
        haltsTable.setSurrendersFocusOnKeystroke(true);
        haltsTable.getEditorComponent().requestFocus();
    }//GEN-LAST:event_haltsTableMouseClicked

    private void distanceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_distanceTableMouseClicked
        distanceTable.editCellAt(distanceTable.getSelectedRow(), distanceTable.getSelectedColumn());
        distanceTable.setSurrendersFocusOnKeystroke(true);
        distanceTable.getEditorComponent().requestFocus();
    }//GEN-LAST:event_distanceTableMouseClicked

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
        String help;
        help = "Steps for enter halts and distances.\n\n";
        help += "Enter names of halts in your rout in order.\n";
        help += "Then clisk on \"Distance\" button to enter distances.\n";
        help += "Then enter distances requested by system.\n\n";
        help += "You can reset entered data and change number of halts\n";
        help += "in your rout by clicking \"Re-enter Halts\" button.";

        JOptionPane.showMessageDialog(this, help);
    }//GEN-LAST:event_helpActionPerformed

    public void addNewRout(String routNumber, String rout, int totalDistance,
            int totalBusFee, int totalDuration, String halts, String distances)
            throws SQLException, ClassNotFoundException {

        String[] haltList = halts.split(", ");
        String[] distancesList = distances.split(", ");
        int[] distanceList = new int[distancesList.length];
        for (int i = 0; i < distancesList.length; i++) {
            distanceList[i] = Integer.parseInt(distancesList[i]);
        }

        con = Database.getConnected();
        String query = "INSERT INTO rout_data "
                + "(rout_number, rout, total_distance, total_bus_fee, total_travel_time_in_minutes) "
                + "VALUES ("
                + "'" + routNumber + "'" + ", "
                + "'" + rout + "'" + ", "
                + totalDistance + ", "
                + totalBusFee + ", "
                + totalDuration
                + ")";
        Database.updateQuery(con, query);

        query = "CREATE TABLE `"
                + routNumber
                + "` (halts VARCHAR(20), distance INT(20))";
        Database.updateQuery(con, query);

        for (int i = 0; i < haltList.length; i++) {
            String halt = haltList[i];
            int distance = distanceList[i];

            query = "INSERT INTO `" + routNumber + "` (`halts`, `distance`) "
                    + "VALUES ('" + halt + "', '" + distance + "')";
            Database.updateQuery(con, query);
        }
        Database.disconnect(con);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JTable distanceTable;
    private javax.swing.JButton enterDistance;
    private javax.swing.JTable haltsTable;
    private javax.swing.JButton help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton ok;
    private javax.swing.JButton reEnter;
    // End of variables declaration//GEN-END:variables
}
