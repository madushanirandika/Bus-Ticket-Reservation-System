/*
 * This is a program by K.G.Sampath Sandaruwan.
 * Smcmails@gmail.com
 * 0774471293
 * Sandaruwankgs.wordpress.com
 */
package Admin;

import Includes.Database;
import java.awt.Dimension;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author K.G.S.Sandaaruwan
 */
public class EditHalts extends javax.swing.JFrame {

    private String adminUsername;
    private String routNumber;
    private int distance;
    private Connection con;
    private ResultSet rs;

    /**
     * Creates new form HaltDistanceInput
     *
     * @param username
     * @param routNumber
     * @param distance
     */
    public EditHalts(String username, String routNumber, int distance) {
        adminUsername = username;
        this.routNumber = routNumber;
        this.distance = distance;
        initWindow();
    }

    private void initWindow() {
        this.setUndecorated(true);
        initComponents();
        this.setSize(890, 570);
        this.setAlwaysOnTop(true);
        this.setResizable(false);
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        initFields();
    }

    private void initFields() {
        distanceTable.setVisible(false);
        jScrollPane2.setVisible(false);
        String[] header = {"Halts"};
        DefaultTableModel dtm = new DefaultTableModel() {
            public boolean isCelEditable(int row, int coll) {
                return coll != 1;
            }
        };
        dtm.setColumnIdentifiers(header);
        haltsTable.setModel(dtm);

        String[] haltData = loadHalts();
        for (String halt : haltData) {
            String[] x = {halt};
            dtm.addRow(x);
            haltsTable.setModel(dtm);
        }

        Dimension dim = jScrollPane1.getSize();
        int height = (haltsTable.getRowCount() * 16) + 26;
        if (height > 420) {
            height = 420;
        }
        jScrollPane1.setSize(dim.width, height);
    }

    private String[] loadHalts() {
        String[] data = null;
        try {
            con = Database.getConnected();
            String qeury = "Select * from `" + routNumber + "`";
            rs = Database.executeQuery(con, qeury);
            int count;
            for (count = 0; rs.next(); count++) {
            }
            rs = Database.executeQuery(con, qeury);
            data = new String[count];
            for (int i = 0; rs.next(); i++) {
                data[i] = rs.getString(1);
            }
        } catch (Exception ex) {
        }
        return data;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        haltsTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        distanceTable = new javax.swing.JTable();
        enterDistance = new javax.swing.JButton();
        reEnter = new javax.swing.JButton();
        ok = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        back.setBackground(new java.awt.Color(0, 51, 153));
        back.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        back.setForeground(new java.awt.Color(0, 255, 255));
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(60, 490, 120, 30);

        haltsTable.setBackground(new java.awt.Color(204, 255, 255));
        haltsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Halts"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(haltsTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(90, 50, 207, 30);

        distanceTable.setBackground(new java.awt.Color(204, 255, 255));
        distanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Distance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(distanceTable);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(430, 50, 400, 30);

        enterDistance.setBackground(new java.awt.Color(0, 51, 153));
        enterDistance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        enterDistance.setForeground(new java.awt.Color(0, 255, 255));
        enterDistance.setText("Distances");
        enterDistance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterDistanceActionPerformed(evt);
            }
        });
        getContentPane().add(enterDistance);
        enterDistance.setBounds(301, 189, 120, 30);

        reEnter.setBackground(new java.awt.Color(255, 153, 204));
        reEnter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        reEnter.setText("Re-enter halts");
        reEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reEnterActionPerformed(evt);
            }
        });
        getContentPane().add(reEnter);
        reEnter.setBounds(220, 490, 150, 30);

        ok.setBackground(new java.awt.Color(0, 51, 153));
        ok.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ok.setForeground(new java.awt.Color(0, 255, 255));
        ok.setText("OK");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });
        getContentPane().add(ok);
        ok.setBounds(700, 490, 130, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/125.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 890, 570);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        ViewRoutsForEdit x = new ViewRoutsForEdit(adminUsername, routNumber);
        x.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backActionPerformed

    private void enterDistanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterDistanceActionPerformed
        haltsTable.setEnabled(false);
        enterDistance.setVisible(false);
        distanceTable.setVisible(true);
        jScrollPane2.setVisible(true);
        setDistanceTable();
    }//GEN-LAST:event_enterDistanceActionPerformed

    private void setDistanceTable() {
        haltsTable.editCellAt(0, 0);
        String[] header = {"Description", "Distance"};
        DefaultTableModel dtm = new DefaultTableModel() {
            public boolean isCelEditable(int row, int coll) {
                return coll != 1;
            }
        };
        dtm.setColumnIdentifiers(header);
        distanceTable.setModel(dtm);

        DefaultTableModel dtm2 = (DefaultTableModel) haltsTable.getModel();

        for (int i = 0; i < haltsTable.getRowCount() - 1; i++) {
            String halt1 = null;
            String halt2 = null;
            try {
                halt1 = dtm2.getValueAt(i, 0).toString();
                halt2 = dtm2.getValueAt(i + 1, 0).toString();
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Dont leave cells in halts table empty");
            }
            if (halt1 != null && halt2 != null) {
                String description = halt1 + " to " + halt2;
                String[] halt = {description};
                dtm.addRow(halt);
                distanceTable.setModel(dtm);
            }
        }

        Dimension dim = distanceTable.getSize();
        int height = (distanceTable.getRowCount() * 16) + 26;
        if (height > 420) {
            height = 420;
        }
        jScrollPane2.setSize(dim.width, height);
    }

    private void reEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reEnterActionPerformed
        String input;
        try {
            do {
                input = JOptionPane.showInputDialog(this, "Your all entered data "
                        + "will be erased.\nDo you want to continue (Y/N)");
            } while (!(input.equalsIgnoreCase("y") || input.equalsIgnoreCase("n")));
        } catch (NullPointerException ex) {
            input = "N";
        }
        if (input.equalsIgnoreCase("y")) {
            try {
                String inputHalts = JOptionPane.showInputDialog(this, "Enter the new number of halts in this bus rout");
                int halts = Integer.parseInt(inputHalts);
                initFieldsAsNew(halts);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Number of halts must be a positive integer");
            }
        }
    }//GEN-LAST:event_reEnterActionPerformed

    private void initFieldsAsNew(int halts) {
        distanceTable.setVisible(false);
        jScrollPane2.setVisible(false);
        enterDistance.setVisible(true);
        String[] header = {"Halts"};
        DefaultTableModel dtm = new DefaultTableModel() {
            public boolean isCelEditable(int row, int coll) {
                return coll != 1;
            }
        };
        dtm.setColumnIdentifiers(header);
        haltsTable.setModel(dtm);

        for (int i = 0; i < halts; i++) {
            String[] x = {};
            dtm.addRow(x);
            haltsTable.setModel(dtm);
        }
    }

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        distanceTable.editCellAt(0, 0);
        DefaultTableModel dtm = (DefaultTableModel) distanceTable.getModel();
        DefaultTableModel dtm2 = (DefaultTableModel) haltsTable.getModel();
        double enteredDistance = 0;
        try {
            for (int i = 0; i < distanceTable.getRowCount(); i++) {
                enteredDistance += Double.parseDouble(dtm.getValueAt(i, 1).toString());
            }
            if (enteredDistance != (double) distance) {
                JOptionPane.showMessageDialog(this, "Entered distance values "
                        + "are not equal with the total distance which entered "
                        + "in prevoius step");

                JOptionPane.showMessageDialog(this, "Your entered distance = " + enteredDistance
                        + "\nYour total distance = " + distance);
            } else {
                String haltList = "";
                String distanceList = "0, ";
                for (int i = 0; i < haltsTable.getRowCount(); i++) {
                    haltList += dtm2.getValueAt(i, 0).toString() + ", ";
                }
                for (int i = 0; i < distanceTable.getRowCount(); i++) {
                    distanceList += dtm.getValueAt(i, 1).toString() + ", ";
                }
                try {
                    editHalts(haltList, distanceList);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Distance should be a positive integer value");
        }
    }//GEN-LAST:event_okActionPerformed

    private void editHalts(String halts, String distances) {
        try {
            String[] haltList = halts.split(", ");
            String[] distancesList = distances.split(", ");
            int[] distanceList = new int[distancesList.length];
            for (int i = 0; i < distancesList.length; i++) {
                distanceList[i] = Integer.parseInt(distancesList[i]);
            }

            String query;
            query = "DROP TABLE `" + routNumber + "`";
            Database.updateQuery(con, query);
            query = "CREATE TABLE `"
                    + routNumber
                    + "` (halts VARCHAR(20), distance INT(20))";
            Database.updateQuery(con, query);

            for (int i = 0; i < haltList.length; i++) {
                String halt = haltList[i];
                int distance = distanceList[i];

                query = "INSERT INTO `" + routNumber + "` (`halts`, `distance`) "
                        + "VALUES ('" + halt + "', '" + distance + "')";
                Database.updateQuery(con, query);

                ViewRoutsForEdit x = new ViewRoutsForEdit(routNumber);
                x.setVisible(true);
                this.dispose();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JTable distanceTable;
    private javax.swing.JButton enterDistance;
    private javax.swing.JTable haltsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton ok;
    private javax.swing.JButton reEnter;
    // End of variables declaration//GEN-END:variables

}
