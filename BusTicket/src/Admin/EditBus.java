/*
 * This is a program by K.G.Sampath Sandaruwan.
 * Smcmails@gmail.com
 * 0774471293
 * Sandaruwankgs.wordpress.com
 */
package Admin;

import Includes.InputChecker;
import Includes.Database;
import java.awt.Dimension;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.*;

/**
 *
 * @author K.G.S.Sandaaruwan
 */
public class EditBus extends javax.swing.JFrame {

    private String adminUsername;
    private boolean isDisplayed = false;
    private boolean editted = false;
    private String[][] importedBusList = null;

    /**
     * Creates new form View
     */
    public EditBus(String username) {
        adminUsername = username;
        initWindow();
        searchBus.setText("");
        setResultTable("");
    }

    public EditBus(String username, String busNumber) {
        adminUsername = username;
        if (busNumber != null) {
            initWindow();
            searchBus.setText(busNumber);
            setResultTable(busNumber);
        }
    }

    private void initWindow() {
        this.setUndecorated(true);
        initComponents();
        this.setSize(890, 570);
        this.setAlwaysOnTop(true);
        this.setResizable(false);
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.searchBus.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        searchBus = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        busTable = new javax.swing.JTable();
        editData = new javax.swing.JButton();
        viewAll = new javax.swing.JButton();
        help = new javax.swing.JButton();
        back = new javax.swing.JButton();
        editSeats = new javax.swing.JButton();
        deleteBus = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Enter bus number here for search");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(40, 10, 570, 14);

        searchBus.setBackground(new java.awt.Color(0, 255, 255));
        searchBus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchBus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBusActionPerformed(evt);
            }
        });
        getContentPane().add(searchBus);
        searchBus.setBounds(40, 30, 570, 30);

        search.setBackground(new java.awt.Color(0, 51, 153));
        search.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        search.setForeground(new java.awt.Color(0, 255, 255));
        search.setText("Go");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        getContentPane().add(search);
        search.setBounds(640, 30, 90, 30);

        busTable.setBackground(new java.awt.Color(204, 255, 255));
        busTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Number", "Seats", "License", "Hotline"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        busTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        busTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                busTableMouseClicked(evt);
            }
        });
        busTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                busTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(busTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 70, 824, 28);

        editData.setBackground(new java.awt.Color(0, 51, 153));
        editData.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        editData.setForeground(new java.awt.Color(0, 255, 255));
        editData.setText("Edit Data");
        editData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDataActionPerformed(evt);
            }
        });
        getContentPane().add(editData);
        editData.setBounds(720, 500, 110, 30);

        viewAll.setBackground(new java.awt.Color(0, 51, 153));
        viewAll.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        viewAll.setForeground(new java.awt.Color(0, 255, 255));
        viewAll.setText("View All");
        viewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllActionPerformed(evt);
            }
        });
        getContentPane().add(viewAll);
        viewAll.setBounds(200, 500, 110, 30);

        help.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/help-icon.png"))); // NOI18N
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });
        getContentPane().add(help);
        help.setBounds(740, 10, 50, 50);

        back.setBackground(new java.awt.Color(0, 51, 153));
        back.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        back.setForeground(new java.awt.Color(0, 255, 255));
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(50, 500, 110, 30);

        editSeats.setBackground(new java.awt.Color(0, 51, 153));
        editSeats.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        editSeats.setForeground(new java.awt.Color(0, 255, 255));
        editSeats.setText("Edit Seat Configuration");
        editSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSeatsActionPerformed(evt);
            }
        });
        getContentPane().add(editSeats);
        editSeats.setBounds(350, 500, 170, 30);

        deleteBus.setBackground(new java.awt.Color(255, 153, 204));
        deleteBus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteBus.setText("Delete Bus");
        deleteBus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBusActionPerformed(evt);
            }
        });
        getContentPane().add(deleteBus);
        deleteBus.setBounds(560, 500, 120, 30);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/125.jpg"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 890, 570);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBusActionPerformed
        setResultTable(searchBus.getText());
    }//GEN-LAST:event_searchBusActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        setResultTable(searchBus.getText());
    }//GEN-LAST:event_searchActionPerformed

    private void busTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_busTableKeyPressed
        editted = true;
    }//GEN-LAST:event_busTableKeyPressed

    private void editDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDataActionPerformed
        busTable.editCellAt(0, 0);
        String unmatches = "";
        boolean allAreCorrect = true;

        if (!isDisplayed) {
            setResultTable(searchBus.getText());
        } else if (importedBusList != null && editted) {
            editted = false;
            int row = busTable.getRowCount();
            int column = busTable.getColumnCount();

            DefaultTableModel dtm = (DefaultTableModel) busTable.getModel();
            for (int i = 0; i < row; i++) {
                for (int j = 0; j < column; j++) {
                    String checkingEntity = dtm.getValueAt(i, j).toString();
                    String originalValue = importedBusList[i][j];

                    if (!(originalValue.equalsIgnoreCase(checkingEntity))) {
                        editted = true;
                        if (j == 1) {
                            JOptionPane.showMessageDialog(this, "Bus number cannot be eddited. "
                                    + "If you want to chane it, delete "
                                    + "existing bus and re enter as a "
                                    + "new bus");
                            break;
                        }
                        if (j == 2) {
                            JOptionPane.showMessageDialog(this, "You can't "
                                    + "directly edit number of seats in your bus. "
                                    + "Please use \"Edit Seat Configuration\" "
                                    + "option for it");
                            break;
                        }
                        if (j == 4 && !(InputChecker.isANumber(checkingEntity))) {
                            allAreCorrect = false;
                            JOptionPane.showMessageDialog(this, "Check the phone number / number Of seats again");
                            break;
                        }
                        if ((j == 0 || j == 3 || j == 4) && allAreCorrect) {
                            unmatches += importedBusList[i][1] + "."
                                    + (j + 1) + "." + checkingEntity + " / ";
                        }
                    }
                }
            }
            if (editted) {
                editted = false;
                try {
                    if (!"".equals(unmatches)) {
                        editBus(unmatches);
                        setResultTable(searchBus.getText());
                        JOptionPane.showMessageDialog(this, "Changes were updated succesfully");
                    }
                } catch (SQLException | ClassNotFoundException ex) {
                }
            }
        }
        setResultTable(searchBus.getText());
    }//GEN-LAST:event_editDataActionPerformed

    public static void editBus(String edditionCode)
            throws SQLException, ClassNotFoundException {

        Connection con;
        String[] changes = edditionCode.split(" / ");
        for (String change : changes) {
            String[] parts = change.split("\\.");
            String attribute = null;
            switch (parts[1]) {
                case "1":
                    attribute = "`bus_name`='" + parts[2] + "'";
                    break;
                case "4":
                    attribute = "`transport_license_number`='" + parts[2] + "'";
                    break;
                case "5":
                    attribute = "`hotlint`=" + parts[2];
                    break;
            }
            con = Database.getConnected();
            String query = "UPDATE bus_data SET "
                    + attribute + " WHERE bus_number ='"
                    + parts[0] + "'";
            ;
            Database.updateQuery(con, query);
            Database.disconnect(con);
        }
    }

    private void busTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_busTableMouseClicked
        editted = true;
        busTable.editCellAt(busTable.getSelectedRow(), busTable.getSelectedColumn());
        busTable.setSurrendersFocusOnKeystroke(true);
        busTable.getEditorComponent().requestFocus();
    }//GEN-LAST:event_busTableMouseClicked

    private void viewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllActionPerformed
        setResultTable(null);
        searchBus.setText("");
    }//GEN-LAST:event_viewAllActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
        String helpMsg;
        helpMsg = "1: - Click on the cell you want to edit.\n";
        helpMsg += "2: - Press enter to add your edited data into current displaying table.\n";
        helpMsg += "3: - Press \"Edit Data\" button to apply changes.";
        JOptionPane.showMessageDialog(this, helpMsg);
    }//GEN-LAST:event_helpActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        Services x = new Services(adminUsername);
        x.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backActionPerformed

    @SuppressWarnings("empty-statement")
    private void editSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSeatsActionPerformed
        if (importedBusList.length == 1) {
            String[] args = {importedBusList[0][1], null};
            Seat x = new Seat(adminUsername, args);
            x.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Search just a single bus and "
                    + "then press \"Edit Seat Configuration\" button");
        }
    }//GEN-LAST:event_editSeatsActionPerformed

    private void deleteBusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBusActionPerformed
        if (importedBusList.length == 1) {
            String busNumber = importedBusList[0][1];
            String input;
            do {
                input = JOptionPane.showInputDialog(this, "Do you really want to delete bus "
                        + busNumber + ". (Y/N)");
            } while (!(input.equalsIgnoreCase("y") || input.equalsIgnoreCase("n")));
            if (input.equalsIgnoreCase("y")) {
                try {
                    deleteBus(busNumber);
                    viewAllActionPerformed(evt);
                } catch (SQLException | ClassNotFoundException ex) {
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Search just a single bus and "
                    + "then press \"Delete Bus\" button");
        }
    }//GEN-LAST:event_deleteBusActionPerformed

    public static void deleteBus(String busNumber) throws SQLException, ClassNotFoundException {
        Connection con = Database.getConnected();
        String query = "DELETE FROM bus_data WHERE bus_number='" + busNumber + "'";
        try {
            Database.updateQuery(con, query);
        } catch (SQLException e) {
        }
        Database.disconnect(con);
    }

    private void setResultTable(String searchKey) {
        String[] header = {"Name", "Number", "Seats", "License", "Hotline"};
        DefaultTableModel dtm = new DefaultTableModel() {
            public boolean isCelEditable(int row, int coll) {
                return coll != 1;
            }
        };
        dtm.setColumnIdentifiers(header);
        busTable.setModel(dtm);

        try {
            importedBusList = viewBus(searchKey);
            if (searchKey != null && importedBusList != null) {
                if (importedBusList.length > 1) {
                    if (!"".equals(searchKey)) {
                        JOptionPane.showMessageDialog(this, "Enterd bus was not found");
                        searchBus.setText("");
                    }
                }
            }
            for (String[] result : importedBusList) {
                dtm.addRow(result);
                busTable.setModel(dtm);
            }

            isDisplayed = true;
        } catch (SQLException | ClassNotFoundException ex) {
        }
        Dimension dim = jScrollPane1.getSize();
        int height = (busTable.getRowCount() * 16) + 26;
        if (height > 420) {
            height = 420;
        }
        jScrollPane1.setSize(dim.width, height);
    }

    private String[][] viewBus(String busNumber)
            throws SQLException, ClassNotFoundException {
        Connection con;
        ResultSet rs;
        String query;
        String[][] results = null;

        con = Database.getConnected();
        if (busNumber != null) {
            query = "SELECT * FROM bus_data WHERE bus_number='" + busNumber.toUpperCase() + "'";
            rs = Database.executeQuery(con, query);
            if (!rs.next()) {
                query = "SELECT * FROM  bus_data";
                rs = Database.executeQuery(con, query);
            }
        } else {
            query = "SELECT * FROM  bus_data";
            rs = Database.executeQuery(con, query);
        }
        if (rs != null) {
            rs = Database.executeQuery(con, query);
            int count;
            for (count = 0; rs.next(); count++) {
            }
            rs = Database.executeQuery(con, query);
            results = new String[(count == 0) ? 1 : count][5];
            for (int i = 0; rs.next(); i++) {
                results[i][0] = rs.getString(1);
                results[i][1] = rs.getString(2);
                results[i][2] = rs.getString(3);
                results[i][3] = rs.getString(4);
                results[i][4] = rs.getString(5);
            }
        }
        Database.disconnect(con);
        return results;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JTable busTable;
    private javax.swing.JButton deleteBus;
    private javax.swing.JButton editData;
    private javax.swing.JButton editSeats;
    private javax.swing.JButton help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchBus;
    private javax.swing.JButton viewAll;
    // End of variables declaration//GEN-END:variables
}
